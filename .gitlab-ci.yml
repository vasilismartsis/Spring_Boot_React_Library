# This file is a template, and might need editing before it works on your project.
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Gradle.gitlab-ci.yml

# This is the Gradle build system for JVM applications
# https://gradle.org/
# https://github.com/gradle/gradle

image: gradle:alpine

before_script:
  - echo $(pwd)
  - GRADLE_USER_HOME="$(pwd)/Library_Back_End/.gradle"
  - export GRADLE_USER_HOME

# stages:
#   - build
#   - test
#   - packaging     

stages:
  - build
  - run  

build_spring_app:
  stage: build
  script:
    - cd Library_Back_End
    - ./gradlew clean build
  artifacts:
    paths:
      - build/libs/*.jar

run_spring_app:
  stage: run
  image: openjdk:11-jre-slim  # Use a Java runtime image to run the app
  script:
    - java -jar Library_Back_End/build/libs/*.jar  # Adjust the path to the JAR file
    

# dockerize:
#   stage: test
#   services:
#     - docker:20.10.16-dind
#   variables:
#     DOCKER_TSL_CERTDIR: "/certs"
#   script:    
#     - docker-compose up --build -d
#   cache:
#     key: "$CI_COMMIT_REF_NAME"
#     policy: pull
#     paths:
#       - build
#       - .gradle

# test:
#   stage: test
#   services:
#     - docker:20.10.16-dind
#   variables:
#     DOCKER_TSL_CERTDIR: "/certs"
#   script:    
#     - cd  Library_Back_End
#     - gradle check
#   cache:
#     key: "$CI_COMMIT_REF_NAME"
#     policy: pull
#     paths:
#       - build
#       - .gradle

# dockerize-backend:
#   stage: packaging
#   image: docker:20.10.16
#   services:
#     - docker:20.10.16-dind
#   script:
#     - docker ps