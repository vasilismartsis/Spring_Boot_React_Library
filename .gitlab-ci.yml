# This file is a template, and might need editing before it works on your project.
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Gradle.gitlab-ci.yml

# This is the Gradle build system for JVM applications
# https://gradle.org/
# https://github.com/gradle/gradle

image: eclipse-temurin:17-jdk-alpine

before_script:
  - GRADLE_USER_HOME="$(pwd)/Library_Back_End/.gradle"
  - export GRADLE_USER_HOME

# stages:
#   - build
#   - test
#   - packaging     

stages:
  # - build-frontend
  # - build-backend
  - run
  # - test

# run:
#   stage: run
#   script:
#     - apk add --no-cache chromium --repository=http://dl-cdn.alpinelinux.org/alpine/edge/community

# build-frontend:
#   stage: build-frontend
#   image: node
#   script:
#     - cd Library_Front_End
#     - yarn install
#     - yarn add net
#     - yarn add react-scripts
#     - yarn build
#   artifacts:
#     paths:
#       - Library_Front_End/build/ 

# build-backend:
#   stage: build-backend
#   script:
#     - cd Library_Back_End
#     - ./gradlew build -x test
#   artifacts:
#     paths:
#     - Library_Back_End/build/    

run:
  stage: run
  services:
    - name: "mcr.microsoft.com/mssql/server" # Use the MSSQL Docker image as a service
      alias: sql-server
  variables:
    MSSQL_SA_PASSWORD: "B16301850b"  # Set the SA password
    ACCEPT_EULA: Y
    SPRING_DATASOURCE_URL: "jdbc:sqlserver://sql-server:1433;encrypt=true;trustServerCertificate=true;DB_CLOSE_ON_EXIT=FALSE"  # Adjust the DB URL
    # END_TO_END_TEST_IP: http://localhost:8080
  script:
    # - cp -a Library_Front_End/build/. Library_Back_End/src/main/resources/public
    - export RUNNER_IP=$(ifconfig eth0 | grep 'inet ' | awk '{print $2}' | cut -d ':' -f 2)
    - export END_TO_END_TEST_IP="http://${RUNNER_IP}:8080"
    - env
    - cd Library_Back_End
    - java -jar build/libs/Library_Back_End-0.0.1-SNAPSHOT.jar
    - wget https://github.com/mozilla/geckodriver/releases/download/v0.33.0/geckodriver-v0.33.0-linux64.tar.gz
    - tar -xzvf geckodriver-v0.33.0-linux64.tar.gz
    - mv geckodriver /usr/bin/
    - apk update
    - apk add curl
    - ip addr
    - ps
    - curl -kX GET http://127.0.0.1:8080
    - apk add firefox
    - ./gradlew test

# dockerize:
#   stage: test
#   services:
#     - docker:20.10.16-dind
#   variables:
#     DOCKER_TSL_CERTDIR: "/certs"
#   script:    
#     - docker-compose up --build -d
#   cache:
#     key: "$CI_COMMIT_REF_NAME"
#     policy: pull
#     paths:
#       - build
#       - .gradle

# test:
#   stage: test
#   script:    
#     - cd  Library_Back_End
#     - gradle check

# dockerize-backend:
#   stage: packaging
#   image: docker:20.10.16
#   services:
#     - docker:20.10.16-dind
#   script:
#     - docker ps